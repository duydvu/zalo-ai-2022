from collections import defaultdict

# importing the module
import wikipedia
# setting language to hindi
wikipedia.set_lang("vi")

date_entity = '(ngày)|(tháng)|(năm)'
time_long_entity = '(thời gian)|(thời kỳ)|(thời điểm)|(giai đoạn)'
time_short_entity = '(thời)|(khi)|(lúc)'
quantity_entity = '(số)|(giờ)|(phút)|(giây)|(thế kỷ)|(thiên niên kỷ)'

quantity_question_entity = '(mấy)|(bao nhiêu)'
wiki_question_entity = '(ai)|(ở đâu)|(gì)|(vì sao)|(tại sao)'

with open('/content/drive/MyDrive/ZaloAI-2022/wikipedia_20220620_cleaned/wikipedia_20220620_all_titles.txt') as f:
  TITLE = f.read().split('\n')
lower_title = [
  re.sub(r'\s+', ' ', re.sub(fr'([{string.punctuation}\\])', ' ', t)).strip().lower() for t in TITLE
]

def predict_type(question):
  question = question.lower()

  if re.search(fr'({date_entity}) (.*là)?({quantity_question_entity}|(nào))', question):
    return 1
  if re.search(fr'^({date_entity})', question) \
    and not re.search(fr'({quantity_question_entity}|{wiki_question_entity}|(nào))', question):
    return 1

  if re.search(fr'({quantity_question_entity})', question):
    return 2
  if re.search(fr'^({quantity_entity})', question) \
    and not re.search(fr'({quantity_question_entity}|{wiki_question_entity}|(nào))', question):
    return 2

  if re.search(fr'({time_long_entity}) (.*là)?({quantity_question_entity}|((lịch sử )?nào))', question):
    return 3
  if re.search(fr'^({time_long_entity})', question) \
    and not re.search(fr'({quantity_question_entity}|{wiki_question_entity}|(nào))', question):
    return 3
  if re.search(fr'({time_short_entity}) nào', question) or re.search(fr'(bao giờ)', question):
    return 3

  return 0

def value(r):
    if (r == 'I'):
        return 1
    if (r == 'V'):
        return 5
    if (r == 'X'):
        return 10
    if (r == 'L'):
        return 50
    if (r == 'C'):
        return 100
    if (r == 'D'):
        return 500
    if (r == 'M'):
        return 1000
    return -1
 
def romanToDecimal(str):
    res = 0
    i = 0
    while (i < len(str)):
        s1 = value(str[i])
        if (i + 1 < len(str)):
            s2 = value(str[i + 1])
            if (s1 >= s2):
                res = res + s1
                i = i + 1
            else:
                res = res + s2 - s1
                i = i + 2
        else:
            res = res + s1
            i = i + 1
    return res

def extract_answer(question, candidate):
  answer_type = predict_type(question)

  if answer_type==3:
    if re.search(r'\d{3,4}', candidate):
      answer_type = 1
    elif re.search(fr'{quantity_entity}', candidate):
      answer_type = 2

  num = re.findall(r'\d+', candidate)
  if answer_type==1:
    if re.search(r'\d{3,4}', candidate):
      if len(num)==1:
        return f'năm {num[0]}'
      elif len(num)==2:
        if re.search(fr'(năm) ({quantity_question_entity}|(nào))', question):
          return f'năm {num[-1]}'
        return f'tháng {num[0]} năm {num[1]}'
      elif len(num)==3:
        if re.search(fr'(năm) ({quantity_question_entity}|(nào))', question):
          return f'năm {num[-1]}'
        return f'ngày {num[0]} tháng {num[1]} năm {num[2]}'
    elif re.search(r'\d{8}', candidate):
      return f'ngày {num[0][:2]} tháng {num[0][2:4]} năm {num[0][4:]}'

  elif answer_type==2:
    if len(num)==1:
      return f'{num[0]}'
    roman = re.search(r'\bM{0,4}(CM|CD|D?C{0,3})(XC|XL|L?X{0,3})(IX|IV|V?I{0,3})\b', candidate)
    if re.search(r'thế kỷ', candidate) and roman:
      return f'{romanToDecimal(roman.group())}'

  title_candidates = defaultdict(lambda: 0)

  candidate = re.sub(r'^(Ngày|ngày)', '', candidate).strip()
  if re.sub(r'\s+', ' ', re.sub(fr'([{string.punctuation}\\])', ' ', candidate)).strip().lower() in lower_title:
    return f'wiki/{"_".join(candidate.split())}'

  result = wikipedia.search(candidate, results = 5)
  # print(row['info'], result)
  for res in result:
    if res in TITLE:
      return 'wiki/' + res.replace(' ', '_')

  return None
